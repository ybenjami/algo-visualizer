[{"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/index.js":"1","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/App.js":"2","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/reportWebVitals.js":"3","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/Counter.js":"4","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/SelectionSort.js":"5","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer.js":"6","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/Kadane.js":"7","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/BubbleSortRedux.js":"8","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/InsertionSortRedux.js":"9","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/QuickSort.js":"10"},{"size":504,"mtime":1608267817648,"results":"11","hashOfConfig":"12"},{"size":3104,"mtime":1611114919857,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1608255522921,"results":"14","hashOfConfig":"12"},{"size":500,"mtime":1608774698734,"results":"15","hashOfConfig":"16"},{"size":3448,"mtime":1624596383895,"results":"17","hashOfConfig":"12"},{"size":3526,"mtime":1624599281762,"results":"18","hashOfConfig":"12"},{"size":3452,"mtime":1624621212232,"results":"19","hashOfConfig":"12"},{"size":3263,"mtime":1624597384869,"results":"20","hashOfConfig":"12"},{"size":3790,"mtime":1622692579862,"results":"21","hashOfConfig":"12"},{"size":2997,"mtime":1623094247179,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1c7zas1",{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cgzhdr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"25"},"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/index.js",[],["48","49"],"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/App.js",["50","51","52"],"import React, { useState } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport SortIcon from '@material-ui/icons/Sort';\nimport Grid from '@material-ui/core/Grid';\nimport BackspaceIcon from '@material-ui/icons/Backspace';\nimport \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer\";\nimport Kadane from \"./Kadane\"\nimport sortImage from \"./image/sort.jpg\";\nimport bellImage from \"./image/Bell_Shaped_Graph.jpg\";\nimport mazeImage from \"./image/maze.jpg\";\n\nconst App = () => {\n    const [topic, setTopic] = useState('default');\n    const topicState = (val) => {\n        setTopic(val);\n    }\n    return (\n        <div className=\"App\">\n             \n                <header className=\"App-header\"></header>\n                <h1>Algorithm Visualizer</h1>\n                \n                {topic !== 'default' &&\n                <Button variant=\"contained\" startIcon={<BackspaceIcon />} color=\"primary\" onClick={() => topicState('default')}>Back</Button>}\n\n            {topic === 'default' &&\n            <div>\n                <Grid container spacing={8}>\n                    <Grid container item xs={2} spacing={1}>\n                        <img src={sortImage} alt=\"Sorting image\" width={200} />\n                    </Grid>\n                    \n                    <Grid container item xs={5} spacing={3}>\n                        <h3>Interested in different Sorting Algorithms? </h3>\n                        <p>Did you know not all sorting Algorithms are created equal? Some algorithms are better than others in terms of Time and/or Space complexity.</p>\n                        \n                        <p><Button variant=\"contained\" startIcon={<SortIcon />} color=\"primary\" onClick={() => topicState('sort')}>Let's get Sorting</Button></p>\n\n                    </Grid>\n                </Grid> \n\n                <Grid container spacing={8}>\n                <Grid container item xs={2} spacing={2}>\n                    <img src={bellImage} alt=\"Sorting image\" width={200} />\n                </Grid>\n                <Grid container item xs={5} spacing={2}>\n                    <h3>Famous Algorithms</h3>\n                    <p> Find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.</p>\n              \n                    <p><Button variant=\"contained\" startIcon={<SortIcon />} color=\"primary\" onClick={() => topicState('kadane')}>Learn More</Button></p>\n                </Grid>\n            </Grid>\n\n            <Grid container spacing={8}>\n                <Grid container item xs={2} spacing={2}>\n                    <img src={mazeImage} alt=\"Sorting image\" width={200} />\n                </Grid>\n                <Grid container item xs={5} spacing={2}>\n                        <h3>Coming Soon Search Algorithms</h3>\n                       <p> Comming soon - Search algorithm visualizer</p>     \n                </Grid>\n          </Grid>\n          </div>}\n\n            {topic === 'sort' &&\n            <SortingVisualizer/>}\n             {topic === 'kadane' &&\n            <Kadane/>} \n        </div>\n       \n    )\n};\nexport default App;","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/reportWebVitals.js",[],"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/Counter.js",[],"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/SelectionSort.js",[],"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer.js",[],"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/Kadane.js",["53"],"import React, { useState } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport CreateIcon from '@material-ui/icons/Create';\n\n\nconst Kadane = () => {\n    const maxAllowedArraySize = 24;\n    const [count] = useState(maxAllowedArraySize);\n    const [maxSoFar,setMaxSoFar] = useState(0);\n    const [frame, setFrame] = useState({array: [], a: 0, b: 0, c: 0, maxSoFar: 0});\n    \n\n    const randomInt = () => {\n        const min = Math.ceil(9);\n        const max = Math.floor(-9);\n        return Math.floor(Math.random() * (max - min + 1) + min)\n        }\n\n    const listArray = frame.array.map((val, index) =>{\n        if(frame.b <= index && frame.c >= index) {\n                return<Button variant=\"contained\" color=\"secondary\"><span>{val}</span></Button>;\n        }\n    \n                return <Button variant=\"outlined\" color=\"primary\" ><span>{val}</span></Button>;\n         });\n\n\n\n\n    const algo = () => {\n         let maxEndingHere = 0;\n         let indexStart = 0;\n         let indexEnd = 0\n         let sum = 0;\n\n         const randomArray = frame.array;\n\n         const animation = [];\n         for (let i =0; i < randomArray.length; i++){\n             maxEndingHere += randomArray[i];\n             maxEndingHere = Math.max(maxEndingHere, 0);\n             if(maxEndingHere <= 0 && i != randomArray.length-1  ) {\n                indexStart=i+1;\n             }\n\n             if(maxEndingHere > sum) {\n                sum = maxEndingHere;\n                indexEnd=i;\n                animation.push(animationStep(randomArray, i, indexStart, indexEnd, sum));\n             }     \n         }\n                 \n            for(let j = 0; j < animation.length; j++){\n                animateFrame(j, animation[j]);\n         }\n        \n\n         return;\n    }\n\n\n    const genArray = () => {\n        let rando = [];\n        for(let i=0; i < count; i++){\n            rando.push(randomInt());\n        }  \n       \n        const init = animationStep(rando, 0,0,0,0);\n        setFrame(init);\n    };\n\n\n    const animateFrame = (i, item) => {\n        setTimeout(() => {\n          setFrame(item)\n          setMaxSoFar(item.max);\n        }, (i * 700 ));\n      }\n\n\n      const animationStep = (array, largest, index, current, max)=>{\n        return {\n           array: array.slice(0),\n           a: largest,\n           b: index,\n           c: current,\n           max,\n        }\n    }\n\n    return(\n        <div>\n            <h3>Kadane's Algorithm </h3>\n            <p><b>The Maximum subarray problem</b> Start By Generating an array of size; and watch was we solve this problem with linear time complexity of 0(n) </p>\n              <div class=\"array-sizer\">\n                  <p class='array-index'>Array size:  <span>{count}</span></p>\n                 \n                  \n                  <p><Button variant=\"contained\" startIcon={<CreateIcon />} color=\"primary\" onClick={genArray}>Generate</Button></p>\n                  \n                  <p> <Button onClick={() => algo()}  variant=\"contained\"  color=\"primary\">Calculate</Button></p>\n                  \n              </div>\n            \n           \n            {listArray.length > 0 &&\n            <div>\n                <div>\n                    {listArray}\n                </div>\n                <br/>\n                    <div> Value: {maxSoFar} </div>\n            \n            </div>\n            \n            }\n    \n        </div>\n    )\n}\n\nexport default Kadane;\n//Function to create a random Gen","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/BubbleSortRedux.js",[],"/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/InsertionSortRedux.js",["54"],"import React, { useState } from \"react\";\nimport Gist from \"react-gist\";\n\nconst SelectionSort = ({input}) => {\n    const [randomArray, setRandomArray] = useState(input);\n    const [frame, setFrame] = useState({array: input, a:0, b: 0, c: 0});\n    const [run, setRun] = useState(true);\n\n\n    const listArray = frame.array.map((val, index) =>{\n        if((frame.a === index) ||(frame.b === index)) {\n            return <div className={`array-bar-working ${index}`} style={{height: `${val}px`}}><span>{val}</span></div>;\n        }\n\n        if(frame.c === index){\n            return <div className={`array-bar-swapping ${index}`} style={{height: `${val}px`}}><span>{val}</span></div>;\n        }\n        return <div className={`array-bar ${index}`} style={{height: `${val}px`}}><span>{val}</span></div>;\n      });\n\n\n    const swap = (array,  leftValue,  rightValue) =>{\n\n        if(leftValue ===rightValue){\n\n            return;\n        }\n            let temp = array[leftValue];\n            array[leftValue] = array[rightValue];\n            array[rightValue] = temp;\n            setRandomArray([...array]);\n        }\n      \n\n    const sort = () => {\n        if(run){\n            setRun(false);\n            let array = randomArray.slice(0);\n            const init = animationStep(array, -1, -1);\n            const animation = [init];\n            for(let index = 1; index < array.length; ++index) { \n                let currentValue = array[index]; \n                let previousPosition = index - 1; \n                 animation.push(animationStep(array, previousPosition, previousPosition, index));\n                  //Swap within the sorted partition of the Array\n                while (previousPosition >= 0 && array[previousPosition] > currentValue) { \n                    array[previousPosition + 1] = array[previousPosition]; \n                    previousPosition = previousPosition - 1; \n                    animation.push(animationStep(array,previousPosition + 1, previousPosition, index));\n\n                } \n                    array[previousPosition + 1] = currentValue; \n                    //animation.push(animationStep(array, array[previousPosition + 1], previousPosition, previousPosition));\n                } \n                 \n                //  animation.push(animationStep(array, sortedPartition, sortedPartition));\n            animation.push(animationStep(array, -1, -1));\n\n           for(let j = 0; j < animation.length; j++){\n              animateFrame(j, animation[j]);\n           }\n            console.log(array);\n            return array;\n        }\n           return\n        }\n\n\n        const animateFrame = (i, item) => {\n            setTimeout(() => {\n              setFrame(item)\n            }, (i * 200 ));\n          }\n\n    const animationStep = (array,left, index, current)=>{\n        return {\n           array: array.slice(0),\n           a: left,\n           b: index,\n           c: current\n        }\n    }\n    sort();\n    return(\n        <div>\n\n        <div className=\"block\">\n            <div className=\"array-container\">\n                    {listArray}\n            </div>\n        </div>\n          \n\n        <div className=\"block\">\n            <div className=\"algo-explain\">\n            <h2>Insertion Sort</h2>\n            <p>Insertion sort iterates, consuming one input element each repetition, and grows a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.</p>\n            </div>\n        </div>\n           <div className='gistlk'>\n            <Gist id='4f72526935f76a2bfd63a3ca2d90a2f8' />\n           </div>\n            \n            </div>\n           \n        \n    )\n}\nexport default SelectionSort;","/Users/ybenjami/Documents/youreOnyaron/visual-sort/visual-sort/src/SortingVisualizer/QuickSort.js",["55"],"import React, { useState } from \"react\";\n\nconst SelectionSort = ({input}) => {\n    const [randomArray, setRandomArray] = useState(input);\n    const [frame, setFrame] = useState({array: input, b: 0, c: 0});\n    const [run, setRun] = useState(true);\n\n\n    const listArray = frame.array.map((val, index) =>{\n        if((frame.b === index || frame.c === index)) {\n            return <div className={`array-bar-working ${index}`} style={{height: `${val}px`}}><span>{val}</span></div>;\n        }\n\n        if(frame.a === index){\n            return <div className={`array-bar-swapping ${index}`} style={{height: `${val}px`}}><span>{val}</span></div>;\n        }\n        return <div className={`array-bar ${index}`} style={{height: `${val}px`}}><span>{val}</span></div>;\n      });\n\n\n    const partition = (input, start, end, animation) => {\n        let pivot = input[start];\n        let i = start;\n        let j = end;\n      \n        while(i<j){\n          while (i< j && input[--j] >= pivot);\n          if(i < j){\n            input[i] = input[j];\n            animation.push(animationStep(input, j, i, j));\n          }\n        \n        while (i < j && input[++i] <= pivot);\n          if(i < j){\n            input[j] = input[i];\n            animation.push(animationStep(input, j, i, j));\n          }\n        \n        }\n        input[j] = pivot;\n        animation.push(animationStep(input, j, i, j));\n        return j; \n      }\n    \n    const quickSort = (input, start, end, animation) => {\n        if(end - start < 2){\n          return;\n        }\n        \n        let pivotPosition = partition(input, start, end, animation);\n        animation.push(animationStep(input, pivotPosition, start, end));\n        quickSort(input, start, pivotPosition, animation);\n        quickSort(input, pivotPosition+1, end,animation);\n      }\n      \n    const sort = () => {\n        if(run){\n            setRun(false);\n            let array = randomArray.slice(0);\n            const init = animationStep(array, -1, -1);\n            const animation = [init];\n            quickSort(array, 0, array.length, animation);\n            animation.push(animationStep(array, -1, -1));\n\n           for(let j = 0; j < animation.length; j++){\n              animateFrame(j, animation[j]);\n           }\n            console.log(array);\n            return array;\n        }\n           return\n        }\n\n\n        const animateFrame = (i, item) => {\n            setTimeout(() => {\n              setFrame(item)\n            }, (i * 200 ));\n          }\n\n    const animationStep = (array, index, current)=>{\n        return {\n           array: array.slice(0),\n           b: index,\n           c: current\n        }\n    }\n    sort();\n    return(\n        <div>\n\n            <div className=\"array-container\" >\n                {listArray}\n            </div>\n            \n            \n            <div className=\"algo-explain\">\n            <h2>Quick Sort</h2>\n           \n            </div>\n           \n      </div>\n        \n    )\n}\nexport default SelectionSort;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":31,"column":25,"nodeType":"62","endLine":31,"endColumn":80},{"ruleId":"60","severity":1,"message":"61","line":45,"column":21,"nodeType":"62","endLine":45,"endColumn":76},{"ruleId":"60","severity":1,"message":"61","line":57,"column":21,"nodeType":"62","endLine":57,"endColumn":76},{"ruleId":"63","severity":1,"message":"64","line":42,"column":41,"nodeType":"65","messageId":"66","endLine":42,"endColumn":43},{"ruleId":"67","severity":1,"message":"68","line":22,"column":11,"nodeType":"69","messageId":"70","endLine":22,"endColumn":15},{"ruleId":"67","severity":1,"message":"71","line":4,"column":25,"nodeType":"69","messageId":"70","endLine":4,"endColumn":39},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'swap' is assigned a value but never used.","Identifier","unusedVar","'setRandomArray' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]